// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/20/2019 14:51:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          skeleton_proc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module skeleton_proc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] move1;
reg reset;
// wires                                               
wire [31:0] stage;

// assign statements (if any)                          
skeleton_proc i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.move1(move1),
	.reset(reset),
	.stage(stage)
);
initial 
begin 
#15000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 
// move1[ 31 ]
initial
begin
	move1[31] = 1'b0;
end 
// move1[ 30 ]
initial
begin
	move1[30] = 1'b0;
end 
// move1[ 29 ]
initial
begin
	move1[29] = 1'b0;
end 
// move1[ 28 ]
initial
begin
	move1[28] = 1'b0;
end 
// move1[ 27 ]
initial
begin
	move1[27] = 1'b0;
end 
// move1[ 26 ]
initial
begin
	move1[26] = 1'b0;
end 
// move1[ 25 ]
initial
begin
	move1[25] = 1'b0;
end 
// move1[ 24 ]
initial
begin
	move1[24] = 1'b0;
end 
// move1[ 23 ]
initial
begin
	move1[23] = 1'b0;
end 
// move1[ 22 ]
initial
begin
	move1[22] = 1'b0;
end 
// move1[ 21 ]
initial
begin
	move1[21] = 1'b0;
end 
// move1[ 20 ]
initial
begin
	move1[20] = 1'b0;
end 
// move1[ 19 ]
initial
begin
	move1[19] = 1'b0;
end 
// move1[ 18 ]
initial
begin
	move1[18] = 1'b0;
end 
// move1[ 17 ]
initial
begin
	move1[17] = 1'b0;
end 
// move1[ 16 ]
initial
begin
	move1[16] = 1'b0;
end 
// move1[ 15 ]
initial
begin
	move1[15] = 1'b0;
end 
// move1[ 14 ]
initial
begin
	move1[14] = 1'b0;
end 
// move1[ 13 ]
initial
begin
	move1[13] = 1'b0;
end 
// move1[ 12 ]
initial
begin
	move1[12] = 1'b0;
end 
// move1[ 11 ]
initial
begin
	move1[11] = 1'b0;
end 
// move1[ 10 ]
initial
begin
	move1[10] = 1'b0;
end 
// move1[ 9 ]
initial
begin
	move1[9] = 1'b0;
end 
// move1[ 8 ]
initial
begin
	move1[8] = 1'b0;
end 
// move1[ 7 ]
initial
begin
	move1[7] = 1'b0;
end 
// move1[ 6 ]
initial
begin
	move1[6] = 1'b0;
end 
// move1[ 5 ]
initial
begin
	move1[5] = 1'b0;
end 
// move1[ 4 ]
initial
begin
	move1[4] = 1'b0;
end 
// move1[ 3 ]
initial
begin
	move1[3] = 1'b0;
end 
// move1[ 2 ]
initial
begin
	move1[2] = 1'b0;
end 
// move1[ 1 ]
initial
begin
	move1[1] = 1'b0;
end 
// move1[ 0 ]
initial
begin
	move1[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #800000 1'b1;
	reset = #800000 1'b0;
end 
endmodule

