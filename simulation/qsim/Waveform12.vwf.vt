// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/20/2019 23:50:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          linear_rng
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module linear_rng_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] initialSeed;
// wires                                               
wire [31:0] random;

// assign statements (if any)                          
linear_rng i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.initialSeed(initialSeed),
	.random(random)
);
initial 
begin 
#3000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 
// initialSeed[ 31 ]
initial
begin
	initialSeed[31] = 1'b0;
end 
// initialSeed[ 30 ]
initial
begin
	initialSeed[30] = 1'b0;
end 
// initialSeed[ 29 ]
initial
begin
	initialSeed[29] = 1'b0;
end 
// initialSeed[ 28 ]
initial
begin
	initialSeed[28] = 1'b0;
end 
// initialSeed[ 27 ]
initial
begin
	initialSeed[27] = 1'b0;
end 
// initialSeed[ 26 ]
initial
begin
	initialSeed[26] = 1'b0;
end 
// initialSeed[ 25 ]
initial
begin
	initialSeed[25] = 1'b0;
end 
// initialSeed[ 24 ]
initial
begin
	initialSeed[24] = 1'b0;
end 
// initialSeed[ 23 ]
initial
begin
	initialSeed[23] = 1'b0;
end 
// initialSeed[ 22 ]
initial
begin
	initialSeed[22] = 1'b0;
end 
// initialSeed[ 21 ]
initial
begin
	initialSeed[21] = 1'b0;
end 
// initialSeed[ 20 ]
initial
begin
	initialSeed[20] = 1'b0;
end 
// initialSeed[ 19 ]
initial
begin
	initialSeed[19] = 1'b0;
end 
// initialSeed[ 18 ]
initial
begin
	initialSeed[18] = 1'b0;
end 
// initialSeed[ 17 ]
initial
begin
	initialSeed[17] = 1'b0;
end 
// initialSeed[ 16 ]
initial
begin
	initialSeed[16] = 1'b0;
end 
// initialSeed[ 15 ]
initial
begin
	initialSeed[15] = 1'b0;
end 
// initialSeed[ 14 ]
initial
begin
	initialSeed[14] = 1'b0;
end 
// initialSeed[ 13 ]
initial
begin
	initialSeed[13] = 1'b0;
end 
// initialSeed[ 12 ]
initial
begin
	initialSeed[12] = 1'b0;
end 
// initialSeed[ 11 ]
initial
begin
	initialSeed[11] = 1'b0;
end 
// initialSeed[ 10 ]
initial
begin
	initialSeed[10] = 1'b0;
end 
// initialSeed[ 9 ]
initial
begin
	initialSeed[9] = 1'b0;
end 
// initialSeed[ 8 ]
initial
begin
	initialSeed[8] = 1'b0;
end 
// initialSeed[ 7 ]
initial
begin
	initialSeed[7] = 1'b0;
end 
// initialSeed[ 6 ]
initial
begin
	initialSeed[6] = 1'b0;
end 
// initialSeed[ 5 ]
initial
begin
	initialSeed[5] = 1'b0;
end 
// initialSeed[ 4 ]
initial
begin
	initialSeed[4] = 1'b0;
end 
// initialSeed[ 3 ]
initial
begin
	initialSeed[3] = 1'b0;
end 
// initialSeed[ 2 ]
initial
begin
	initialSeed[2] = 1'b0;
end 
// initialSeed[ 1 ]
initial
begin
	initialSeed[1] = 1'b0;
end 
// initialSeed[ 0 ]
initial
begin
	initialSeed[0] = 1'b0;
end 
endmodule

